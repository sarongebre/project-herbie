<?php

/**
 * @file
 * Contains theme functions for unl_five_herbie.
 */

use Drupal\block\Entity\Block;
use Drupal\node\NodeInterface;
use Drupal\views\Views;

/**
 * Implements hook_preprocess_html().
 */
function unl_five_herbie_preprocess_html(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteObject()->getOption('_layout_builder')) {
    // Add Layout Builder specific CSS settings.
    $variables['#attached']['library'][] = 'unl_five_herbie/layout-builder';
  }
}

/**
 * Implements template_preprocess_region().
 */
function unl_five_herbie_preprocess_region(&$variables) {
  // Hide the hero region page title on Person nodes.
  $current_route = \Drupal::routeMatch();
  $node = $current_route->getParameter('node');
  if ($node instanceof NodeInterface) {
    $bundle = $node->bundle();

    switch ($bundle) {
      case ('person'):
        $variables['unl_no_page_title'] = TRUE;
        break;
    }
  }

  if ($variables['region'] == 'hero') {
    $current_route = \Drupal::routeMatch();
    $node = $current_route->getParameter('node');
    if ($node instanceof NodeInterface) {
      // Create a Twig title_hidden variable to hide the page title
      // with .dcf-sr-only if user picks that option.
      if ($node->hasField('s_n_page_options') && !$node->get('s_n_page_options')->isEmpty()) {
        $publish_options = $node->get('s_n_page_options')->getValue();
        if (array_search('title_hidden', array_column($publish_options, 'value')) !== FALSE) {
          $variables['title_hidden'] = TRUE;
        }
      }

      // Add the Hero field (s_n_hero) to the hero region template, region--hero.html.twig.
      if ($node instanceof NodeInterface && $node->hasField('s_n_hero') && !$node->get('s_n_hero')->isEmpty()) {
        $variables['s_n_hero'] = $node->get('s_n_hero')->view(['label' => 'hidden', 'type' => 'entity_reference_entity_view'])[0];

        // Set a variable with the b_hero_size CSS class since rendering the field
        // directly into the template will include breaking HTML comments if twig debugging is enabled.
        $variables['hero_size_class'] = $variables['s_n_hero']['b_hero_size'][0]['#markup'];
      }
    }
  }
}

/*
 * Implements template_preprocess_block().
 */
function unl_five_herbie_preprocess_block(&$variables) {
  // Set $bundle var for custom block entities.
  $bundle = NULL;
  if (isset($variables['content']['#block_content'])) {
    $bundle = $variables['content']['#block_content']->bundle();
  }

  if (isset($variables['content']['#block_content'])) {
    $section_layout_builder_styles = $variables['content']['#block_content']->__get('#section_lbs');
    $variables['data']['section_lbs'] = $section_layout_builder_styles;
  }
  elseif (isset($variables['content']['#view'])) {
    $section_layout_builder_styles = $variables['content']['#view']->storage->get('#section_lbs');
  }
  elseif (isset($variables['content']['#object'])) {
    $section_layout_builder_styles = $variables['content']['#object']->__get('#section_lbs');
  }

  // Set unl-cream on the main heading label in the block template.
  // Note that in many cases the label isn't being used in lieu of a "headline" field.
  if (isset($section_layout_builder_styles) && in_array('section_background_style_brand', $section_layout_builder_styles)) {
    $variables['title_attributes']['class'][] = 'unl-cream';
  }

  // Make host available to contact_info custom block.
  if ($bundle == 'contact_info') {
    $variables['data']['host'] = \Drupal::request()->getHost();
  }
}

/**
 * Implements template_preprocess_node__TYPE().
 */
function unl_five_herbie_preprocess_node__news(&$variables) {
  // Determine URL, depending on whether local content or remote
  // (Nebraska Today) content.
  if ($canonical_url = $variables['node']->get('n_news_canonical_url')->getString()) {
    $variables['link'] = $canonical_url;
    $variables['source'] = 'remote';
  }
  else {
    $variables['link'] = $variables['url'];
    $variables['source'] = 'local';
  }
}

/**
 * Implements template_preprocess_field().
 */
function unl_five_herbie_preprocess_field(&$variables) {
  $field_name = $variables['field_name'];

  /*
   * Photo Hero Block Fields
   */
  $photoHeroFields = array('b_photohero_links');

  if (in_array($field_name, $photoHeroFields)) {

    switch ($field_name) {

      case 'b_photohero_links':
          // Add needed classes to the <a> tag inside a Hero block.
          foreach ($variables['items'] as $key => $item) {
            $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-btn dcf-btn-primary';
          }
          break;
    }
  }

  /*
   * Call to action Block Fields
   */
  $ctaFields = array('b_cta_link', 'b_cta_summary', 'b_cta_title');

  if (in_array($field_name, $ctaFields)) {
    switch ($field_name) {
      case 'b_cta_link':
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-btn dcf-btn-inverse-primary dcf-uppercase';
        }
        break;
    }
  }

  /*
   * Card Block Fields
   */
  $cardFields = array('b_card_image', 'b_card_cta', 'b_card_overline', 'b_card_subhead', 'b_card_headline');

  if (in_array($field_name, $cardFields)) {
    switch ($field_name) {
      case 'b_card_cta':
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-card-link dcf-btn dcf-btn-primary';
        }
        break;
    }
  }

   /*
   * Timeline Block Fields
   */
  $timelineFields = array('b_timeline_style', 'b_timeline_item', );

  if (in_array($field_name, $timelineFields)) {

  $timelineStyle = $variables['element']['#object']->get('b_timeline_style')->getValue();

    switch ($field_name) {
      case 'b_timeline_item':
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['timelineData']['timelineStyle'] = isset($timelineStyle[0]['value']) ? strval($timelineStyle[0]['value']) : '';
                }
        break;
    }
  }

  /*
   * Social media links Block Fields
   */
  $fields = array('b_social_media_links_title');

  if (in_array($field_name, $fields)) {
    switch ($field_name) {
      case 'b_social_media_links_title':
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-txt-h5 dcf-txt-center unl-cream dcf-mb-0';
        }
        break;
    }
  }
}

/**
 * Implements template_preprocess_layout().
 */
function unl_five_herbie_preprocess_layout(&$variables) {
  // Hide the second sidebar and make the first full width if user selects "Hide sidebar(s)".
  $current_route = \Drupal::routeMatch();
  $node = $current_route->getParameter('node');
  if ($node instanceof NodeInterface) {
    if ($variables['settings']['label'] == 'Content' &&
      $node->hasField('s_n_page_options') &&
      !$node->get('s_n_page_options')->isEmpty())
    {
      $publish_options = $node->get('s_n_page_options')->getValue();
      if (array_search('no_sidebars', array_column($publish_options, 'value')) !== FALSE) {
        $variables['region_attributes']['first']->removeClass('dcf-col-25%-start@md');
        $variables['region_attributes']['first']->removeClass('dcf-col-33%-start@md');
        $variables['region_attributes']['first']->removeClass('dcf-col-50%-start@md');
        $variables['region_attributes']['first']->removeClass('dcf-col-67%-start@md');
        $variables['region_attributes']['first']->removeClass('dcf-col-75%-start@md');
        $variables['region_attributes']['second']->addClass('dcf-d-none');
      }
    }
  }

  // Make section Layout Builder Styles array available to each block in the layout.
  // Values can be accessed in a Twig template with data.section_lbs, see unl_five_herbie_preprocess_block().
  if (isset($variables['settings']['layout_builder_styles_style']) && !empty($variables['settings']['layout_builder_styles_style'])) {
    $layout_builder_styles = $variables['settings']['layout_builder_styles_style'];
    // Replace numeric keys with the value.
    foreach($layout_builder_styles as $value) {
      $section_layout_builder_styles[$value] = $value;
    }
  }
  if (isset($section_layout_builder_styles) && !empty($section_layout_builder_styles)) {
    // Loop through each region.
    foreach ($variables['content'] as $region_id => $region) {
      if (substr($region_id, 0, 1) !== '#') {
        // Loop through each block.
        foreach ($region as $block_id => $block) {
          if (substr($block_id, 0, 1) !== '#') {
            if (isset($variables['content'][$region_id][$block_id]['content']['#block_content'])) {
              $variables['content'][$region_id][$block_id]['content']['#block_content']->__set('#section_lbs', $section_layout_builder_styles);
            }
            elseif (isset($variables['content'][$region_id][$block_id]['content']['#view'])) {
              $variables['content'][$region_id][$block_id]['content']['#view']->storage->set('#section_lbs', $section_layout_builder_styles);
            }
            elseif (isset($variables['content'][$region_id][$block_id]['content']['#object'])) {
              $variables['content'][$region_id][$block_id]['content']['#object']->__set('#section_lbs', $section_layout_builder_styles);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_views_view_fields().
 */
function unl_five_herbie_preprocess_views_view_fields(&$variables) {
  // Apply .unl-cream to View fields if view is being included in a dark
  // Layout Builder section.
  $section_layout_builder_styles = $variables['view']->storage->get('#section_lbs');
  if (is_array($section_layout_builder_styles) &&
    in_array('section_background_style_brand', $section_layout_builder_styles)) {
    foreach ($variables['fields'] as $field) {
      $field->element_attributes->addClass('class', 'unl-cream');
    }
  }
}

/**
 * Implements template_preprocess_responsive_image_formatter().
 */
function unl_five_herbie_preprocess_responsive_image_formatter(array &$variables) {
  // Pass field name to Twig as data- attribute.
  $variables['responsive_image']['#attributes']['data-field-name'] = $variables['item']->getFieldDefinition()->get('field_name');
}
