<?php

/**
 * @file
 * This module provides install, uninstall, and update functions.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\twig_ui\TemplateManager;

/**
 * Implements hook_requirements().
 */
function twig_ui_requirements($phase) {
  if (($phase != 'runtime')) {
    return;
  }

  $template_manager = \Drupal::service('twig_ui.template_manager');
  $file_system = \Drupal::service('file_system');

  $requirements['twig_ui_templates'] = [
    'title' => 'Twig UI Template Directory',
  ];

  $directory_path = $template_manager::DIRECTORY_PATH;
  $path = $file_system->realpath($directory_path) . '/.htaccess';
  if (file_exists($path)) {
    $requirements['twig_ui_templates']['severity'] = REQUIREMENT_OK;
    $requirements['twig_ui_templates']['value'] = t('Twig UI templates directory exists and is protected.');
  }
  elseif (!file_exists($directory_path)) {
    $requirements['twig_ui_templates']['severity'] = REQUIREMENT_ERROR;
    $requirements['twig_ui_templates']['value'] = Link::fromTextAndUrl('Create directory', Url::fromRoute('twig_ui.templates_directory_prepare'))->toString();
    $requirements['twig_ui_templates']['description'] = t('The Twig UI templates directory does not exist: ' . $directory_path . '.');
  }
  else {
    $requirements['twig_ui_templates']['severity'] = REQUIREMENT_ERROR;
    $requirements['twig_ui_templates']['value'] = Link::fromTextAndUrl('Protect directory', Url::fromRoute('twig_ui.templates_directory_prepare'))->toString();
    $requirements['twig_ui_templates']['description'] = t('The Twig UI templates directory is unprotected: ' . $directory_path . '.');
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function twig_ui_install($is_syncing) {
  $result = TemplateManager::prepareTemplatesDirectory();
  if ($result === TRUE) {
    // Don't render success message on config import.
    // Use $is_syncing parameter when Drupal 8.8 reaches EOL.
    // https://www.drupal.org/node/3098920.
    if (!$is_syncing) {
      \Drupal::messenger()->addStatus(t('The Twig UI templates directory was successfully created and protected.'));
    }
  }
  else {
    \Drupal::messenger()->addWarning(t('Preparation of the Twig UI templates directory resulted in the following error: @message', ['@message' => $result]));
    \Drupal::logger('twig_ui')->error('Preparation of the Twig UI templates directory resulted in the following error: @message', ['@message' => $result]);
  }
}

/**
 * Implements hook_uninstall().
 */
function twig_ui_uninstall() {
  $directory = TemplateManager::DIRECTORY_PATH;
  \Drupal::service('file_system')->deleteRecursive($directory);
}

/**
 * Add 'enabled' status to existing Twig UI templates.
 */
function twig_ui_update_8101() {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface */
  $config_factory = \Drupal::service('config.factory');

  $templates = \Drupal::service('twig_ui.template_manager')->getTemplates();
  foreach ($templates as $template) {
    /** @var \Drupal\Core\Config\Config */
    $config = $config_factory->getEditable('twig_ui.template.' . $template->id());
    $data = $config->get();
    $data['status'] = TRUE;
    $config->setData($data);
    $config->save();
  }
}

/**
 * Set default config values for new config options.
 */
function twig_ui_update_8102() {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface */
  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->getEditable('twig_ui.settings');
  $data = $config->get();

  $replacement_config['allowed_themes'] = 'all';
  $replacement_config['allowed_theme_list'] = [];
  $replacement_config['default_selected_themes'] = $data['default_selected_themes'];

  $config->setData($replacement_config);
  $config->save();
}
